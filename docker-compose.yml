version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: nike_postgres
    environment:
      POSTGRES_DB: nike_db
      POSTGRES_USER: nike_user
      POSTGRES_PASSWORD: nike_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - nike_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nike_user -d nike_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: nike_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - nike_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nike_backend
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgresql://nike_user:nike_password@postgres:5432/nike_db
      - JWT_SECRETE_KEY=${JWT_SECRETE_KEY:-your_jwt_secret_here}
      - EMAIL=${EMAIL:-your_email@example.com}
      - PASSWORD=${PASSWORD:-your_email_password}
      - ADMIN_EMAIL=${ADMIN_EMAIL:-admin@nike.com}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin123}
      - ADMIN_USERNAME=${ADMIN_USERNAME:-admin}
      - CLOUDINARY_URL=${CLOUDINARY_URL}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - nike_network
    restart: unless-stopped
    volumes:
      - ./src/uploads:/app/src/uploads
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
  redis_data:

networks:
  nike_network:
    driver: bridge 